#!/bin/bash

# v0.3

# Adds data to the log file
log() {
    printf "$date_$time\t $@" | tee -a "$log_file"
}

# Establishes script variables
set_var() {
    ## Script Variables
    time=$(date +%T)

    # Get current time and date
    date=$(date +%m-%d-%y)

    #  Sets working directory
    if [[ -z "$sysreport_dir" ]]; then
        sysreport_dir="/opt/sysreport"
    fi

    #  Set the path to log directories
    log_dir="$sysreport_dir/log"
    log_file="$sysreport_dir/log/${date}_sysreport.log"
    log_snapshot_dir="$sysreport_dir/log/snapshots"
    log_snapshot="$sysreport_dir/log/snapshots/${date}_${time}_sysreport-snapshot.log"

    #  Set the path to sysreport files
    conf_file="$sysreport_dir/config/sysreport.conf"
    conf_dir="$sysreport_dir/config"
}

# Sets up script directories and files
script_setup() {
    # Sets variables
    set_var

    if [ "$EUID" -ne 0 ]; then
      set_var
      print_and_cat_logs
      exit
    fi

    verify_launch_daemon

    # Sets the processes
    if [[ -f $conf_file ]]; then
      IFS=$'\n' read -d '' -r -a process < $conf_file
    fi

    #  Creates sysreport directories
    dirs=("$sysreport_dir" "$log_dir" "$log_snapshot_dir")
    for dir in "${dirs[@]}"
    do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            echo "Directory $dir created."
        fi
    done

    #  Creates sysreport files
    files=("$log_file")
    for file in "${files[@]}"
    do
        if [ ! -f "$file" ]; then
            touch "$file"
            echo "log $file created."
        fi
    done
}

# Verifys launch daemon
verify_launch_daemon() {
  if [[ ! -f "/Library/LaunchDaemons/com.leadingreach.sysreport.plist" ]]; then
    # Create the launch daemon plist file
    echo "<?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
    <plist version="1.0">
    <dict>
        <key>Label</key>
        <string>com.leadingreach.sysreport</string>
        <key>Program</key>
        <string>/usr/local/bin/sysreport</string>
        <key>StartInterval</key>
        <integer>60</integer>
        <key>RunAtLoad</key>
        <true/>
    </dict>
    </plist>" > "/Library/LaunchDaemons/com.leadingreach.sysreport.plist"
    # Start the launch daemon
    launchctl load "/Library/LaunchDaemons/com.leadingreach.sysreport.plist"
  else
    # Check if the launch daemon is properly configured
    launchctl list | grep "com.leadingreach.sysreport" &>/dev/null
    if [[ $? -ne 0 ]]; then
      # Start the launch daemon
      launchctl load "/Library/LaunchDaemons/com.leadingreach.sysreport.plist" &>/dev/null
    fi
  fi
}

# Uninstalls sysreport
uninstall() {
  script_setup
  launchctl unload /Library/LaunchDaemons/com.leadingreach.sysreport.plist
  rm /Library/LaunchDaemons/com.leadingreach.sysreport.plist
  rm -rf "$sysreport_dir"
  rm /usr/local/bin/sysreport
  exit
}

# Deletes logs after 30 days
delete_logs() {
	# Find all .log files older than 30 days
	find $sysreport_dir -type f -name "*.log" -mtime +30 -print0 | xargs -0 rm -f
}

# Checks the status of the system cpu and memory
cpu_check() {
    # Check CPU load
    # cpu_load=`top -l 1 | awk '/CPU usage/ {print $3}' | sed 's/%//'` > 4.12
    cpu_total_load=$(top -l 2 | grep -E "^CPU" | head -n 1 | awk '{print $1, $2, $3, $4, $5, $6, $7, $8, $9}')
    cpu_system_load=$(echo "${cpu_total_load}" | awk '{print $5}' | awk '{print int($1+0.5)}')
    cpu_user_load=$(echo "${cpu_total_load}" | awk '{print $3}' | awk '{print int($1+0.5)}')

    # Check Memory load
    mem_total_load=$(echo "Memory usage: $(sysctl -n hw.memsize | awk '{print $0/1024/1024/1024"GB"}') total, $(ps -A -o rss | awk '{sum+=$1} END {print sum/1024/1024"GB"}') used, $(sysctl -n vm.swapusage | awk '{print $3}') swap")
    mem_system_load=$(echo "${mem_total_load}" | awk '{print $5}' | awk '{print int($1+0.5)}')
    mem_swap_load=$(echo "${mem_total_load}" | awk '{print $7}' | awk '{print int($1+0.5)}')
    
    # Check if CPU load is above 50%
    if [[ $cpu_system_load -gt 50 ]] || [[ $cpu_user_load -gt 50 ]]; then
        cpu_status="high"
    else
        cpu_status="norm"
    fi

    if [[ $mem_system_load -gt 8 ]] || [[ $mem_swap_load -gt 4096 ]]; then
        mem_status="high"
    else
        mem_status="norm"
    fi

    log "CPU Load: $cpu_status - Sys: $cpu_system_load%%  User: $cpu_user_load%%  |  Mem Load: $mem_status - Sys: "$mem_system_load"GB  Swap: "$mem_swap_load"MB\n"

    if [[ $cpu_status == "high" ]] || [[ $mem_status == "high" ]]; then
        cpu_report
        process_check
    fi
}

# Generates CPU reporting information
cpu_report() {
    cpu_report="$(printf "USER:\t\t\tPID:\t\tCPU:\t\tMEM:\t\tSTART:\t\tTIME:\t\tCOMMAND:\n"
  ps aux | sort -nrk 3,3 | awk '{printf("%-20s\t%-10s\t%-10s\t%-10s\t%-10s\t%-10s\t%-10s\t%-10s\n", $1, $2, $3, $4, $9, $10, $11, $12)}')"

    # Exporets the enite report
    echo "$cpu_report" > $log_snapshot
}

# Checks the status of the process
process_check() {
    # Checks if there is a specific process to monitor
    if [[ ! -z $process ]]; then
        for item in "${process[@]}"; do
            process_name="$item"
            process_dir="$sysreport_dir/$item"
            process_file="$process_dir/${date}_${item}"

            if [ ! -d "$process_dir" ]; then
            mkdir -p "$process_dir"
            echo "Directory $dir created."
            fi
            process_report "$item"
        done
    fi
}

# Generates process reporting information
process_report() {
  if [[ -z $cpu_report ]]; then
      cpu_report
  fi

  # Use awk to extract the columns and join them with commas
  echo "$cpu_report" | tail -n +2 | grep "$process_name" | awk '{print "'"$time"'\t", $0}' >> "$process_file".log
}

# Adds proccess to be monitored
process_add() {
  echo "$process_new" >> $conf_file
}

# Shows sysreport logs
print_and_cat_logs() {
  while true; do
    i=1
    for file in $(find $log_dir -maxdepth 1 -type f); do
      echo "File $i: $file"
      i=$((i+1))
    done
    read -p "Enter a file number: " file_num
    if [[ $file_num =~ ^[0-9]+$ ]]; then
      if [ $file_num -gt 0 ] && [ $file_num -le $i ]; then
          break
      else
        echo "Invalid input. Please enter a valid file number."
      fi
    else
      echo "Invalid input. Please enter a valid file number."
    fi
  done
  file=$(find $log_dir -maxdepth 1 -type f -exec basename {} \; | sed -n "${file_num}p")
  grep "high" "$log_dir/$file" | nl -s ': '
  date=$(echo $file | awk -F "_" '{print $1}')
  read -p "Enter a log number: " line_num
  if [[ $line_num =~ ^[0-9]+$ ]]; then
    time=$(awk "NR==$line_num" "$log_dir/$file" | awk '{print $1}')
    snapshot_file=$(find $log_snapshot_dir -type f -name "${date}_${time}_sysreport-snapshot.log")
    printf "$snapshot_file\n"
    vim "$snapshot_file"
  else
    echo "Invalid input. Please enter a valid line number."
  fi
}

# Checks for sysreport flags
flag_check() {
    while getopts ":ld:p:u" opt; do
    case $opt in
        l)
        set_var
        print_and_cat_logs
        exit
        ;;
        d)
        sysreport_dir="$OPTARG"
        script_setup
        ;;
        p)
        process_new="$OPTARG"
        script_setup
        process_add
        ;;
        u)
        uninstall
        ;;
    esac
    done
    shift $((OPTIND -1))
}

flag_check "$@"
script_setup
cpu_check
delete_logs